{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GetGifs.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","sendCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","htmlFor","id","type","value","onChange","target","getGif","category","a","url","fetch","res","json","data","gif","map","img","title","images","downsized","GifItem","className","src","alt","GetGifs","loading","state","setState","useEffect","then","gfs","useFetchGifs","gifs","GifExpertApp","setCategory","catg","Math","random","toString","substring","ReactDOM","render","document","getElementById"],"mappings":"qLAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,IACAF,EAAaE,GACbC,EAAc,MAKlB,UACI,uBAAOI,QAAQ,SAAf,8BACA,uBAAOC,GAAG,SAASC,KAAK,OAAOC,MAAOR,EAAYS,SAfhC,SAACN,GACvBF,EAAcE,EAAEO,OAAOF,c,uBCPlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACoCF,EADpC,8DAEAG,MAAMD,GAFN,cAEZE,EAFY,gBAGGA,EAAIC,OAHP,uBAGXC,EAHW,EAGXA,KAEHC,EAAMD,EAAKE,KAAI,SAAAC,GACf,MAAO,CACHf,GAAIe,EAAIf,GACRgB,MAAOD,EAAIC,MACXR,IAAKO,EAAIE,OAAOC,UAAUV,QAThB,kBAYXK,GAZW,4CAAH,sDCENM,EAAU,SAAC,GAAW,IAAVJ,EAAS,EAATA,IACrB,OACI,sBAAKK,UAAU,yCAAf,UACI,qBAAKC,IAAKN,EAAIP,IAAKc,IAAKP,EAAIC,QAC5B,4BAAID,EAAIC,YCFPO,EAAU,SAAC,GAAkB,IAAhBjB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GACzB,MAA0Bb,mBAAS,CAACmB,KAAM,GAAIY,SAAS,IAAvD,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WACNtB,EAAOC,GACNsB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAKiB,EACLL,SAAS,SAGlB,CAAClB,IAGGmB,EDXsBK,CAAaxB,GAA9ByB,EAAZ,EAAOnB,KAAWY,EAAlB,EAAkBA,QAElB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDd,IAClDkB,GAAW,mBAAGJ,UAAU,qDAAb,yBACZ,qBAAKA,UAAU,YAAf,SACKW,EAAKjB,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,CAAsBA,IAAKA,GAAbA,EAAIf,aETtCgC,EAAe,WACxB,MAAgCvC,mBAAS,IAAzC,mBAAOa,EAAP,KAAiB2B,EAAjB,KAMA,OACI,qCACI,8CACA,oBAAIb,UAAU,kEAAd,8BAEA,cAAC,EAAD,CAAa5B,aATA,SAACoB,GAClBqB,EAAY,CAACrB,GAAF,mBAAWN,QASlB,uBACA,6BACKA,EAASQ,KAAI,SAAAoB,GAAI,OAAI,cAAC,EAAD,CAAuD5B,SAAU4B,GAAnDC,KAAKC,SAASC,SAAS,IAAIC,UAAU,a,MCZzFC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5bfa4ba9.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ sendCategory }) => {\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue) {\r\n            sendCategory(inputValue)\r\n            setInputValue(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"search\">Search your Gifs</label>\r\n            <input id=\"search\" type='text' value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    sendCategory: PropTypes.func.isRequired\r\n}\r\n","export const getGif = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=5&api_key=tKnbcTmpsoPTBUY8vBSbPx0wzSpRWno1`\r\n    const res = await fetch(url)\r\n    const {data} = await res.json()\r\n\r\n    let gif = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized.url\r\n        }\r\n    })\r\n    return gif\r\n}","import React from 'react'\r\n\r\nexport const GifItem = ({img}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifItem } from './GifItem'\r\n\r\nexport const GetGifs = ({ category }) => {\r\n\r\n    const {data:gifs, loading} = useFetchGifs(category)\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {loading && <p className=\"animate__animated animate__flash animate__repeat-3\">Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                {gifs.map(img => <GifItem key={img.id} img={img} />)}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGif } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({data: [], loading: true})\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n        .then(gfs => {\r\n            setState({\r\n                data:gfs,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [category])\r\n\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GetGifs } from './components/GetGifs'\r\n\r\nexport const GifExpertApp = () => {\r\n    const [category, setCategory] = useState([])\r\n\r\n    const sendCategory = (data) => {\r\n        setCategory([data, ...category])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1>GifExpertApp</h1>\r\n            <h2 className=\"vladimir animate__animated animate__heartBeat animate__repeat-3\">Aprende Vladimir</h2>\r\n            \r\n            <AddCategory sendCategory={sendCategory}/>\r\n            <hr/>\r\n            <ol>\r\n                {category.map(catg => <GetGifs key={Math.random().toString(36).substring(2)} category={catg}/>)}\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}